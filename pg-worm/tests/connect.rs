use pg_worm::{connect, register, Filter, Model, NoTls};

#[derive(Model)]
struct Book {
    #[column(primary_key, auto)]
    id: i64,
    #[column(unique)]
    title: String,
    #[column(references(Author::id))]
    author: i64
}

#[derive(Model)]
struct Author {
    #[column(primary_key, auto)]
    id: i64,
    name: String
}

#[tokio::test]
async fn complete_procedure() -> Result<(), pg_worm::Error> {
    // First create a connection. This can be only done _once_.
    connect!("postgres://me:me@localhost:5432", NoTls).await?;

    // Then, register the model with the pg_worm client.
    //
    // This creates a completely new table.
    // Beware that should there already be a table
    // with the same name, it is dropped.
    register!(Book).await?;

    // Next, insert a new book.
    // This works by passing values for all
    // fields which aren't autogenerated.
    Book::insert("Foo - Part I", 1).await?;
    Book::insert("Foo - Part II", 1).await?;

    // Query all books from the database
    let books: Vec<Book> = Book::select(Filter::all()).await;
    assert_eq!(books.len(), 2);

    // Or search for a specific book
    let book = Book::select_one(
        Book::id.eq(2) & Book::title.one_of(vec!["Foo - Part I", "Foo - Part III"])
            | Book::title.eq("Foo - Part II") & Book::id.eq(2),
    )
    .await;

    assert!(book.is_some());
    // assert_eq!(book.unwrap().title, "Foo - Part II");

    // Or delete a book, you don't like
    Book::delete(Book::title.eq("Foo - Part II")).await;

    Ok(())
}
